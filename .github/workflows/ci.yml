name: Build Qt5 Library
env:
  QT_REPO: 'https://github.com/qt/qt5.git'
  QT_BRANCH: 'dev'
  SNAPSHOT_TAG: 'qt5-daily-snapshot'
on:
  workflow_dispatch:
    inputs:
      qt_branch:
        description: 'Qt branch/tag to build'
        required: true
        default: "dev"
        type: string
  schedule:
    - cron: '0 0 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      qt_branch: ${{ steps.set-branch.outputs.qt_branch }}
    steps:
      - name: Set branch
        id: set-branch
        run: |
          if [ "${{ github.event.inputs.qt_branch }}" != "" ]; then
            echo "qt_branch=${{ github.event.inputs.qt_branch }}" >> $GITHUB_OUTPUT
          else
            echo "qt_branch=${{ env.QT_BRANCH }}" >> $GITHUB_OUTPUT
          fi

  build-windows:
    needs: setup
    runs-on: windows-latest
    strategy:
      matrix:
        build_type: [release]
    steps:
      - name: Checkout Qt5
        uses: actions/checkout@v4
        with:
          repository: qt/qt5
          ref: ${{ needs.setup.outputs.qt_branch }}
          fetch-depth: 0
          submodules: false

      - name: Install dependencies
        run: |
          choco install -y mingw

      - name: Initialize Qt submodules
        shell: cmd
        run: |
          init-repository.bat --module-subset=qtbase,qtdeclarative,qtmultimedia
          git submodule update --remote

      - name: Configure
        shell: cmd
        run: |
          mkdir build
          cd build

          set CFLAGS=-O3 -s
          set CXXFLAGS=-O3 -s
          set CMAKE_CXX_STANDARD=20
          set "OUTPUT_DIR=%CD%\..\install"
          set "CC=C:\ProgramData\mingw64\mingw64\bin\gcc"
          set "CXX=C:\ProgramData\mingw64\mingw64\bin\g++"
          
          ..\configure.bat -qt-zlib -qt-libjpeg -qt-libpng ^
          -qt-freetype -no-harfbuzz -schannel -reduce-exports -prefix "%OUTPUT_DIR%" -no-feature-testlib -no-feature-sql -no-feature-test_gui ^
          -nomake tests -nomake examples -no-warnings-are-errors -submodules qtbase,qtdeclarative,qtmultimedia ^
          -skip qtlanguageserver,qtquicktimeline,WITH_PCH -feature-optimize_full ^
          -D QT_BUILD_EXAMPLES_BY_DEFAULT=OFF -D QT_BUILD_TESTS_BY_DEFAULT=OFF ^
          ${{ matrix.build_type == 'debug' && '-debug' || '-release' }}

      - name: Build Qt
        shell: cmd
        run: |
          cd build
          cmake --build . --parallel
          cmake --install .
          
      - name: Package artifacts
        shell: pwsh
        run: |
          $installDir = Join-Path -Path $PWD -ChildPath "install"
          Write-Host "Packaging Qt install from: $installDir"
          Compress-Archive -Path $installDir -DestinationPath "qt5-windows-mingw-${{ matrix.build_type }}-${{ needs.setup.outputs.qt_branch }}.zip"
          
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: qt5-windows-mingw
          path: qt5-windows-mingw-${{ matrix.build_type }}-${{ needs.setup.outputs.qt_branch }}.zip

  build-android:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type: [release]
        arch: [arm64-v8a, armeabi-v7a]
    steps:
      - name: Checkout Qt5
        uses: actions/checkout@v4
        with:
          repository: qt/qt5
          ref: ${{ needs.setup.outputs.qt_branch }}
          fetch-depth: 0
          submodules: false
      
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '24'
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-dev cmake
      
      - name: Initialize Qt submodules
        run: |
          perl init-repository --module-subset=qtbase,qtdeclarative
          git submodule update --remote
      
      - name: Build host Qt for cross-compilation
        run: |          
          mkdir -p host-qt
          cd host-qt

          export CFLAGS="-O3"
          export CXXFLAGS="-O3"
          export CMAKE_CXX_STANDARD=20
          export QT_FORCE_BUILD_TOOLS=ON
          
          INSTALL_PATH=$PWD/install
          echo "QT_HOST_PATH=$INSTALL_PATH" >> $GITHUB_ENV
          
          ../configure -prefix $INSTALL_PATH -release -qt-zlib -qt-libjpeg -qt-libpng -qt-freetype -qt-pcre -no-harfbuzz -reduce-exports -no-feature-test_gui \
            -nomake tests -nomake examples -no-feature-sql -skip qtlanguageserver,qtquicktimeline,qtimageformats,qtsvg,qtquick3d,WITH_PCH \
            -submodules qtbase,qtdeclarative -no-warnings-are-errors -feature-optimize_full
          
          cmake --build . --parallel
          cmake --install .
          
      - name: Build Android Qt
        run: |
          mkdir -p openssl
          cd openssl
          OPENSSL_ARCHIVE=openssl-android-${{ matrix.arch }}.zip
          wget https://github.com/reg31/openssl/releases/latest/download/$OPENSSL_ARCHIVE
          unzip $OPENSSL_ARCHIVE
          export OPENSSL_ROOT_DIR=$PWD 
          export OPENSSL_LIBRARIES=$PWD/lib
          export OPENSSL_INCLUDE_DIR=$PWD/include
          export OPENSSL_CRYPTO_LIBRARY=crypto
          export OPENSSL_SSL_LIBRARY=ssl
          export OPENSSL_VERSION=3.0.0
          cd ..
          
          mkdir -p build
          cd build
          
          export CFLAGS="-O3"
          export CXXFLAGS="-O3"
          export CMAKE_CXX_STANDARD=20
          
          INSTALL_PATH=$PWD/install
          echo "QT_INSTALL_DIR=$INSTALL_PATH" >> $GITHUB_ENV

          ../configure -prefix $INSTALL_PATH -nomake examples -nomake tests -no-feature-sql -no-feature-test_gui \
            -release -qt-zlib -qt-libjpeg -qt-libpng -qt-freetype -qt-pcre -no-harfbuzz -reduce-exports \
            -android-abis ${{ matrix.arch }} -android-ndk ${ANDROID_NDK_LATEST_HOME} -android-sdk ${ANDROID_HOME} \
            -submodules qtbase,qtdeclarative -qt-host-path ${QT_HOST_PATH} -feature-optimize_full \
            -D QT_BUILD_EXAMPLES_BY_DEFAULT=OFF -D QT_BUILD_TESTS_BY_DEFAULT=OFF -skip qtlanguageserver,qtquicktimeline,WITH_PCH -no-warnings-are-errors \
            -openssl-linked -- -D OPENSSL_USE_STATIC_LIBS=TRUE
          
          cmake --build . --parallel
          cmake --install .
          
      - name: Package artifacts
        run: |
          OUTPUT_DIR="qt5-android-${{ matrix.arch }}-${{ matrix.build_type }}-${{ needs.setup.outputs.qt_branch }}"
          mkdir -p "${OUTPUT_DIR}"
          cp -r "${QT_INSTALL_DIR}"/* "${OUTPUT_DIR}/"
          zip -r "${OUTPUT_DIR}.zip" "${OUTPUT_DIR}"
          
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: qt5-android-${{ matrix.arch }}
          path: qt5-android-${{ matrix.arch }}-${{ matrix.build_type }}-${{ needs.setup.outputs.qt_branch }}.zip

  build-macos:
    needs: setup
    runs-on: macos-latest
    strategy:
      matrix:
        build_type: [release]
    steps:
      - name: Checkout Qt5
        uses: actions/checkout@v4
        with:
          repository: qt/qt5
          ref: ${{ needs.setup.outputs.qt_branch }}
          fetch-depth: 0
          submodules: false
      
      - name: Initialize Qt submodules
        run: |
          perl init-repository --module-subset=qtbase,qtdeclarative,qtmultimedia
          git submodule update --remote
        
      - name: Configure and build
        run: |
          mkdir -p build
          cd build

          export CFLAGS="-O3"
          export CXXFLAGS="-O3"
          export CMAKE_CXX_STANDARD=20
          
          INSTALL_PATH=$PWD/install
          echo "QT_INSTALL_DIR=$INSTALL_PATH" >> $GITHUB_ENV
          
          ../configure -platform macx-clang -submodules qtbase,qtdeclarative,qtmultimedia -D QT_BUILD_EXAMPLES_BY_DEFAULT=OFF -D QT_BUILD_TESTS_BY_DEFAULT=OFF \
            -skip qtlanguageserver,qtquicktimeline,WITH_PCH -no-feature-sql -release -nomake tests -nomake examples -no-warnings-are-errors -no-feature-test_gui \
            -feature-optimize_full -qt-zlib -qt-libjpeg -qt-libpng -qt-freetype -qt-pcre -no-harfbuzz -securetransport -reduce-exports -prefix ${INSTALL_PATH}
          
          cmake --build . --parallel
          cmake --install .
          
      - name: Package artifacts
        run: |
          OUTPUT_DIR="qt5-macos-${{ matrix.build_type }}-${{ needs.setup.outputs.qt_branch }}"
          echo "Using QT_INSTALL_DIR: $QT_INSTALL_DIR"
          mkdir -p "${OUTPUT_DIR}"
          cp -r "${QT_INSTALL_DIR}"/* "${OUTPUT_DIR}/"
          zip -r "${OUTPUT_DIR}.zip" "${OUTPUT_DIR}"
          
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: qt5-macos
          path: qt5-macos-${{ matrix.build_type }}-${{ needs.setup.outputs.qt_branch }}.zip

  build-ios:
    needs: setup
    runs-on: macos-latest
    strategy:
      matrix:
        build_type: [release]
    steps:
      - name: Checkout Qt5
        uses: actions/checkout@v4
        with:
          repository: qt/qt5
          ref: ${{ needs.setup.outputs.qt_branch }}
          fetch-depth: 0
          submodules: false
      
      - name: Initialize Qt submodules
        run: |
          perl init-repository --module-subset=qtbase,qtdeclarative
          git submodule update --remote
      
      - name: Build host Qt for cross-compilation
        run: |
          mkdir -p host-qt
          cd host-qt

          export CFLAGS="-O3"
          export CXXFLAGS="-O3"
          export CMAKE_CXX_STANDARD=20
          export QT_FORCE_BUILD_TOOLS=ON
          
          INSTALL_PATH=$PWD/install
          echo "QT_HOST_PATH=$INSTALL_PATH" >> $GITHUB_ENV
          
          ../configure -prefix $INSTALL_PATH -release -qt-zlib -qt-libjpeg -qt-libpng -qt-freetype -qt-pcre -no-harfbuzz -reduce-exports -no-feature-test_gui \
            -nomake tests -nomake examples -no-feature-sql -skip qtlanguageserver,qtquicktimeline,qtimageformats,qtsvg,qtquick3d,WITH_PCH \
            -feature-optimize_full -submodules qtbase,qtdeclarative -no-warnings-are-errors
          
          cmake --build . --parallel
          cmake --install .
        
      - name: Configure and build for iOS
        run: |
          mkdir -p build
          cd build
          
          export CFLAGS="-O3"
          export CXXFLAGS="-O3"
          export CMAKE_CXX_STANDARD=20
          
          INSTALL_PATH=$PWD/install
          echo "QT_INSTALL_DIR=$INSTALL_PATH" >> $GITHUB_ENV
          
          ../configure -platform macx-ios-clang -submodules qtbase,qtdeclarative -D QT_BUILD_EXAMPLES_BY_DEFAULT=OFF -D QT_BUILD_TESTS_BY_DEFAULT=OFF \
            -skip qtlanguageserver,qtquicktimeline,WITH_PCH -no-feature-sql -release -nomake tests -nomake examples -no-warnings-are-errors \
            -qt-zlib -qt-libjpeg -qt-libpng -qt-freetype -qt-pcre -no-harfbuzz -securetransport -reduce-exports -no-feature-test_gui \
            -feature-optimize_full -prefix ${INSTALL_PATH} -qt-host-path ${QT_HOST_PATH}            
          
          cmake --build . --parallel
          cmake --install .
          
      - name: Package artifacts
        run: |
          OUTPUT_DIR="qt5-ios-${{ matrix.build_type }}-${{ needs.setup.outputs.qt_branch }}"
          echo "Using QT_INSTALL_DIR: $QT_INSTALL_DIR"
          mkdir -p "${OUTPUT_DIR}"
          cp -r "${QT_INSTALL_DIR}"/* "${OUTPUT_DIR}/"
          zip -r "${OUTPUT_DIR}.zip" "${OUTPUT_DIR}"
          
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: qt5-ios
          path: qt5-ios-${{ matrix.build_type }}-${{ needs.setup.outputs.qt_branch }}.zip

  release:
    needs: [setup, build-windows, build-android, build-macos, build-ios]
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: qt5-builds
          
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.run_id }}
          name: "Qt5 Library - Build"
          body: |
            Automated build of Qt5 ${{ needs.setup.outputs.qt_branch }}
            
            This build includes binaries for:
            - Windows (x64) with qtbase, qtdeclarative, qtmultimedia
            - Android (armeabi-v7a, arm64-v8a) with qtbase, qtdeclarative
            - iOS with qtbase, qtdeclarative
            - macOS with qtbase, qtdeclarative, qtmultimedia
            
          files: |
            qt5-builds/qt5-windows-mingw/*.zip
            qt5-builds/qt5-android-armeabi-v7a/*.zip
            qt5-builds/qt5-android-arm64-v8a/*.zip
            qt5-builds/qt5-macos/*.zip
            qt5-builds/qt5-ios/*.zip
          
      - name: Cleanup repository
        uses: dev-drprasad/delete-older-releases@v0.3.4
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
