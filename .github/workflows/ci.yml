name: Build Qt5 Library
env:
  QT_REPO: 'https://github.com/qt/qt5.git'
  QT_BRANCH: 'dev'
  SNAPSHOT_TAG: 'qt5-daily-snapshot'

on:
  workflow_dispatch:
    inputs:
      qt_branch:
        description: 'Qt branch/tag to build'
        required: true
        default: "dev"
        type: string
      skip_macos_ios:
        description: 'Skip macOS and iOS builds'
        required: false
        default: false
        type: boolean
  schedule:
    - cron: '0 0 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      qt_branch: ${{ steps.set-branch.outputs.qt_branch }}
      qt_version: ${{ steps.get-version.outputs.qt_version }}
      skip_macos_ios: ${{ steps.set-skip-macos-ios.outputs.skip_macos_ios }}
    steps:
      - name: Set branch
        id: set-branch
        run: |
          if [ "${{ github.event.inputs.qt_branch }}" != "" ]; then
            echo "qt_branch=${{ github.event.inputs.qt_branch }}" >> $GITHUB_OUTPUT
          else
            echo "qt_branch=${{ env.QT_BRANCH }}" >> $GITHUB_OUTPUT
          fi

      - name: Set skip_macos_ios flag
        id: set-skip-macos-ios
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "skip_macos_ios=${{ github.event.inputs.skip_macos_ios }}" >> $GITHUB_OUTPUT
          else
            echo "skip_macos_ios=true" >> $GITHUB_OUTPUT
          fi

      - name: Checkout Qt5
        uses: actions/checkout@v4
        with:
          repository: qt/qt5
          ref: ${{ steps.set-branch.outputs.qt_branch }}
          fetch-depth: 0
          path: qt5-src

      - name: Get Qt version
        id: get-version
        working-directory: qt5-src
        run: |
          VERSION=$(git describe --tags --always 2>/dev/null || echo "unknown")
          echo "qt_version=$VERSION" >> $GITHUB_OUTPUT

  build-windows:
    needs: setup
    runs-on: windows-latest
    strategy:
      matrix:
        build_type: [release]
    steps:
      - name: Checkout Qt5
        uses: actions/checkout@v4
        with:
          repository: qt/qt5
          ref: ${{ needs.setup.outputs.qt_branch }}
          fetch-depth: 0
          submodules: false

      - name: Install dependencies
        run: |
          choco install -y mingw

      - name: Initialize Qt submodules
        shell: cmd
        run: |
          init-repository.bat --module-subset=qtbase,qtdeclarative,qtmultimedia

      - name: Configure
        shell: cmd
        run: |
          mkdir build
          cd build
          
          set CFLAGS=-O3 -s -ffat-lto-objects
          set CXXFLAGS=-O3 -s -ffat-lto-objects
          set "CC=C:\ProgramData\mingw64\mingw64\bin\gcc"
          set "CXX=C:\ProgramData\mingw64\mingw64\bin\g++"
          set QT_BUILD_EXAMPLES_BY_DEFAULT=OFF
          set QT_BUILD_TESTS_BY_DEFAULT=OFF
          set QT_BUILD_TOOLS_BY_DEFAULT=OFF
          
          ..\configure.bat -qt-zlib ^
          -qt-libjpeg ^
          -qt-libpng ^
          -qt-freetype ^
          -no-harfbuzz ^
          -schannel ^
          -reduce-exports ^
          -prefix %CD%\install ^
          -no-feature-testlib ^
          -submodules qtbase,qtdeclarative,qtmultimedia ^
          ${{ matrix.build_type == 'debug' && '-debug' || '-release' }}

      - name: Build Qt
        shell: cmd
        run: |
          cd build
          cmake --build . --parallel
          cmake --install .
          
      - name: Package artifacts
        shell: pwsh
        run: |
          # Use the QT_INSTALL_DIR environment variable set by CMake
          $OUTPUT_DIR = "D:/a/qt/qt/build/install"
          Write-Host "Packaging Qt install from: $OUTPUT_DIR"
          Compress-Archive -Path $OUTPUT_DIR -DestinationPath "qt5-windows-mingw-${{ matrix.build_type }}-${{ needs.setup.outputs.qt_version }}.zip"
          
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: qt5-windows-mingw-${{ matrix.build_type }}
          path: qt5-windows-mingw-${{ matrix.build_type }}-${{ needs.setup.outputs.qt_version }}.zip

  build-android:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type: [release]
        arch: [arm64-v8a, armeabi-v7a]
    steps:
      - name: Checkout Qt5
        uses: actions/checkout@v4
        with:
          repository: qt/qt5
          ref: ${{ needs.setup.outputs.qt_branch }}
          fetch-depth: 0
          submodules: false
      
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '24'
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev
      
      - name: Download NDK
        run: |
          mkdir -p ${ANDROID_HOME}/ndk
          cd ${ANDROID_HOME}/ndk
          echo "ANDROID_API=35" >> $GITHUB_ENV
          curl -O https://dl.google.com/android/repository/android-ndk-r28b-linux.zip
          unzip -q android-ndk-r28b-linux.zip
          echo "ANDROID_NDK_HOME=${ANDROID_HOME}/ndk/android-ndk-r28b" >> $GITHUB_ENV
      
      - name: Initialize Qt submodules
        run: |
          export ANDROID_NDK_ROOT=$ANDROID_NDK_HOME
          export PATH=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH
          perl init-repository --module-subset=qtbase,qtdeclarative
      
      - name: Build host Qt for cross-compilation
        run: |
          mkdir -p host-qt
          cd host-qt
          
          ../configure -prefix $PWD/install -submodules qtbase,qtdeclarative \
            -release -qt-zlib -qt-libjpeg -qt-libpng -qt-freetype -qt-pcre -no-harfbuzz -reduce-exports \
            CFLAGS="-O3" CXXFLAGS="-O3" -nomake tests -nomake examples
          
          cmake --build . --parallel
          cmake --install .
          
          echo "QT_HOST_PATH=$PWD/install" >> $GITHUB_ENV
      
      - name: Configure and build for Android
        run: |
          mkdir -p build
          cd build
          
          # Define install path and set it as environment variable
          INSTALL_PATH=$PWD/install
          echo "QT_INSTALL_DIR=$INSTALL_PATH" >> $GITHUB_ENV
          
          export CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH
          export QT_BUILD_EXAMPLES_BY_DEFAULT=OFF
          export QT_BUILD_TESTS_BY_DEFAULT=OFF
          export QT_BUILD_TOOLS_BY_DEFAULT=OFF
          export CFLAGS="-O3"
          export CXXFLAGS="-O3"
          
          # Setup configuration options
          CONFIG_OPTIONS="-static -ltcg -qt-zlib -qt-libjpeg -qt-libpng -qt-freetype -qt-pcre -no-harfbuzz -reduce-exports"
          CONFIG_OPTIONS="$CONFIG_OPTIONS -openssl-runtime -android-ndk ${ANDROID_NDK_HOME} -android-sdk ${ANDROID_HOME}"
          CONFIG_OPTIONS="$CONFIG_OPTIONS -android-arch ${{ matrix.arch }} -prefix ${INSTALL_PATH} -qt-host-path ${QT_HOST_PATH}"
          
          if [ "${{ matrix.build_type }}" = "debug" ]; then
            CONFIG_OPTIONS="$CONFIG_OPTIONS -debug"
          else
            CONFIG_OPTIONS="$CONFIG_OPTIONS -release"
          fi
          
          # Configure Qt for Android
          ../configure -platform android-clang -xplatform android-clang -submodules qtbase,qtdeclarative $CONFIG_OPTIONS
          
          # Build and install
          cmake --build . --parallel
          cmake --install .
          
      - name: Package artifacts
        run: |
          OUTPUT_DIR="qt5-android-${{ matrix.arch }}-${{ matrix.build_type }}-${{ needs.setup.outputs.qt_version }}"
          
          # Make sure the directory exists
          mkdir -p "${OUTPUT_DIR}"
          
          # Copy the installed Qt files to the output directory
          cp -r "${QT_INSTALL_DIR}"/* "${OUTPUT_DIR}/"
          
          # Create zip archive
          zip -r "${OUTPUT_DIR}.zip" "${OUTPUT_DIR}"
          
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: qt5-android-${{ matrix.arch }}-${{ matrix.build_type }}
          path: qt5-android-${{ matrix.arch }}-${{ matrix.build_type }}-${{ needs.setup.outputs.qt_version }}.zip

  build-macos:
    needs: setup
    runs-on: macos-latest
    if: ${{ needs.setup.outputs.skip_macos_ios != 'true' }}
    strategy:
      matrix:
        build_type: [release]
    steps:
      - name: Checkout Qt5
        uses: actions/checkout@v4
        with:
          repository: qt/qt5
          ref: ${{ needs.setup.outputs.qt_branch }}
          fetch-depth: 0
          submodules: false
      
      - name: Initialize Qt submodules
        run: |
          perl init-repository --module-subset=qtbase,qtdeclarative,qtmultimedia
        
      - name: Configure and build
        run: |
          mkdir -p build
          cd build
          
          INSTALL_PATH=$PWD/install
          
          CONFIG_OPTIONS="-static -ltcg -qt-zlib -qt-libjpeg -qt-libpng -qt-freetype -qt-pcre -no-harfbuzz -securetransport -reduce-exports -prefix ${INSTALL_PATH}"
          
          if [ "${{ matrix.build_type }}" = "debug" ]; then
            CONFIG_OPTIONS="$CONFIG_OPTIONS -debug"
          else
            CONFIG_OPTIONS="$CONFIG_OPTIONS -release"
          fi
          
          export CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH
          export QT_BUILD_EXAMPLES_BY_DEFAULT=OFF
          export QT_BUILD_TESTS_BY_DEFAULT=OFF
          export QT_BUILD_TOOLS_BY_DEFAULT=OFF
          export CFLAGS="-O3"
          export CXXFLAGS="-O3"
          
          ../configure -platform macx-clang -submodules qtbase,qtdeclarative,qtmultimedia $CONFIG_OPTIONS
          
          cmake --build . --parallel
          cmake --install .
          
      - name: Package artifacts
        run: |
          OUTPUT_DIR="qt5-macos-${{ matrix.build_type }}-${{ needs.setup.outputs.qt_version }}"
          
          # Use the QT_INSTALL_DIR environment variable set by CMake
          echo "Using QT_INSTALL_DIR: $QT_INSTALL_DIR"
          
          # Copy the installed Qt files to the output directory
          cp -r "${QT_INSTALL_DIR}" "${OUTPUT_DIR}"
          
          zip -r "${OUTPUT_DIR}.zip" "${OUTPUT_DIR}"
          
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: qt5-macos-${{ matrix.build_type }}
          path: qt5-macos-${{ matrix.build_type }}-${{ needs.setup.outputs.qt_version }}.zip

  build-ios:
    needs: setup
    runs-on: macos-latest
    if: ${{ needs.setup.outputs.skip_macos_ios != 'true' }}
    strategy:
      matrix:
        build_type: [release]
    steps:
      - name: Checkout Qt5
        uses: actions/checkout@v4
        with:
          repository: qt/qt5
          ref: ${{ needs.setup.outputs.qt_branch }}
          fetch-depth: 0
          submodules: false
      
      - name: Initialize Qt submodules
        run: |
          perl init-repository --module-subset=qtbase,qtdeclarative
      
      - name: Build host Qt for cross-compilation
        run: |
          mkdir -p host-qt
          cd host-qt
          
          CFLAGS="-O3" CXXFLAGS="-O3" ../configure -prefix $PWD/install -submodules qtbase,qtdeclarative \
            -release -qt-zlib -qt-libjpeg -qt-libpng -qt-freetype -qt-pcre -no-harfbuzz -reduce-exports
          
          cmake --build . --parallel
          cmake --install .
          
          echo "QT_HOST_PATH=$PWD/install" >> $GITHUB_ENV
        
      - name: Configure and build for iOS
        run: |
          mkdir -p build
          cd build
          
          INSTALL_PATH=$PWD/install
          
          CONFIG_OPTIONS="-static -ltcg -qt-zlib -qt-libjpeg -qt-libpng -qt-freetype -qt-pcre -no-harfbuzz -securetransport -reduce-exports -prefix ${INSTALL_PATH} -qt-host-path ${QT_HOST_PATH}"
          
          if [ "${{ matrix.build_type }}" = "debug" ]; then
            CONFIG_OPTIONS="$CONFIG_OPTIONS -debug"
          else
            CONFIG_OPTIONS="$CONFIG_OPTIONS -release"
          fi
          
          export CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH
          export QT_BUILD_EXAMPLES_BY_DEFAULT=OFF
          export QT_BUILD_TESTS_BY_DEFAULT=OFF
          export QT_BUILD_TOOLS_BY_DEFAULT=OFF
          export CFLAGS="-O3"
          export CXXFLAGS="-O3"
          
          ../configure -platform macx-ios-clang -submodules qtbase,qtdeclarative $CONFIG_OPTIONS
          
          cmake --build . --parallel
          cmake --install .
          
      - name: Package artifacts
        run: |
          OUTPUT_DIR="qt5-ios-${{ matrix.build_type }}-${{ needs.setup.outputs.qt_version }}"
          
          # Use the QT_INSTALL_DIR environment variable set by CMake
          echo "Using QT_INSTALL_DIR: $QT_INSTALL_DIR"
          
          # Copy the installed Qt files to the output directory
          cp -r "${QT_INSTALL_DIR}" "${OUTPUT_DIR}"
          
          zip -r "${OUTPUT_DIR}.zip" "${OUTPUT_DIR}"
          
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: qt5-ios-${{ matrix.build_type }}
          path: qt5-ios-${{ matrix.build_type }}-${{ needs.setup.outputs.qt_version }}.zip

  release:
    # needs: [setup, build-windows, build-android, build-macos, build-ios]
    needs: [setup, build-windows]
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: qt5-builds
          
      - name: Create release
        uses: softprops/action-gh-release@v2.2.2
        with:
          tag_name: ${{ env.SNAPSHOT_TAG }}
          name: "Qt5 Library - Build"
          body: |
            Automated build of Qt5 ${{ needs.setup.outputs.qt_version }}
            
            This build includes binaries for:
            - Windows (x64) with qtbase, qtdeclarative, qtmultimedia
            - Android (armeabi-v7a, arm64-v8a) with qtbase, qtdeclarative
            ${{ needs.setup.outputs.skip_macos_ios != 'true' && '- iOS with qtbase, qtdeclarative
            - macOS with qtbase, qtdeclarative, qtmultimedia' || '' }}
            
            All builds compiled with -O3 optimization level using Ninja build system.
            
            **Build Date:** $(date +'%Y-%m-%d %H:%M:%S')
          files: |
            qt5-builds/qt5-windows-*/qt5-windows-*.zip
            qt5-builds/qt5-android-*/qt5-android-*.zip
            ${{ needs.setup.outputs.skip_macos_ios != 'true' && 'qt5-builds/qt5-ios-*/qt5-ios-*.zip
            qt5-builds/qt5-macos-*/qt5-macos-*.zip' || '' }}
          prerelease: false
