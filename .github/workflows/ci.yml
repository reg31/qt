name: Build Qt Library
env:
  QT_REPO: 'https://github.com/qt/qt5.git'
  QT_BRANCH: 'dev'
  SNAPSHOT_TAG: 'qt-daily-snapshot'
  INIT_FLAGS: --module-subset=qtbase,qtdeclarative --branch --no-update
  SHARED_FLAGS: -release -no-feature-testlib -no-feature-dtls -DQT_NO_PACKAGE_VERSION_CHECK=TRUE -DQT_NO_PACKAGE_VERSION_INCOMPATIBLE_WARNING=TRUE
    -no-feature-hijricalendar -no-feature-islamiccivilcalendar -nomake tests -nomake examples -submodules qtbase,qtdeclarative -no-feature-sql
    -skip qtlanguageserver,qtquicktimeline,qtquick3d,WITH_PCH -qt-zlib -qt-libjpeg -qt-libpng -no-harfbuzz -reduce-exports -no-feature-sctp
    -DQT_BUILD_EXAMPLES_BY_DEFAULT=OFF -DQT_BUILD_TESTS_BY_DEFAULT=OFF -DQT_BUILD_TOOLS_BY_DEFAULT=OFF -feature-optimize_full -no-feature-calendarwidget
    -no-feature-imageformat_ppm -no-warnings-are-errors -disable-deprecated-up-to 0x070000 -c++std c++20 -no-feature-test_gui -no-feature-jalalicalendar
    -no-feature-imageformat_bmp -feature-relocatable -strip -no-feature-pdf -no-feature-private_tests -no-feature-dbus -no-feature-vnc
    -no-feature-localserver -no-feature-libproxy -no-feature-vkgen -no-feature-xml -no-feature-printsupport -no-feature-udpsocket
    -DFEATURE_quickcontrols2_fluentwinui3=off DFEATURE_quickcontrols2_imagine=off -DFEATURE_quick_designer=off -DFEATURE_qdoc=off -no-feature-imageformat_xbm
    -DFEATURE_quick_sprite=OFF -DFEATURE_quickcontrols2_imagine=OFF -DFEATURE_quickcontrols2_universal=OFF -DFEATURE_quickcontrols2_fusion=OFF
    -DFEATURE_cxx20=ON -DFEATURE_quick_canvas=off -DFEATURE_quicktemplates2_calendar=off -DFEATURE_style_windowsvista=off -DFEATURE_style_windows=off    
          
on:
  workflow_dispatch:
    inputs:
      qt_branch:
        description: 'Qt branch/tag to build'
        required: true
        default: "dev"
        type: string
  schedule:
    - cron: '0 0 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      qt_branch: ${{ steps.set-branch.outputs.qt_branch }}
    steps:
      - name: Set branch
        id: set-branch
        run: |
          if [ "${{ github.event.inputs.qt_branch }}" != "" ]; then
            echo "qt_branch=${{ github.event.inputs.qt_branch }}" >> $GITHUB_OUTPUT
          else
            echo "qt_branch=${{ env.QT_BRANCH }}" >> $GITHUB_OUTPUT
          fi

  build-windows:
    needs: setup
    runs-on: windows-latest
    strategy:
      matrix:
        build_type: [release]
    steps:
      - name: Checkout Qt
        uses: actions/checkout@v4
        with:
          repository: qt/qt5
          ref: ${{ needs.setup.outputs.qt_branch }}
          fetch-depth: 0
          submodules: false

      - name: Install dependencies
        run: choco install -y wget

      - name: Download mingw
        shell: cmd
        run: |
          set MINGW_ARCHIVE=x86_64-15.1.0-release-posix-seh-ucrt-rt_v12-rev0.7z
          wget https://github.com/niXman/mingw-builds-binaries/releases/download/15.1.0-rt_v12-rev0/%MINGW_ARCHIVE%
          7z x %MINGW_ARCHIVE%

      - name: Initialize Qt submodules
        shell: cmd
        run: init-repository.bat ${{ env.INIT_FLAGS }}

      - name: Configure
        shell: cmd
        run: |
          set CFLAGS=-O3 -s
          set CXXFLAGS=-O3 -s
          set "CC=%CD%\mingw64\bin\gcc"
          set "CXX=%CD%\mingw64\bin\g++"
          set "OUTPUT_DIR=%CD%\qt-windows-mingw-${{ matrix.build_type }}-${{ needs.setup.outputs.qt_branch }}"

          mkdir build
          cd build
          
          ..\configure.bat -schannel -prefix "%OUTPUT_DIR%" ${{ env.SHARED_FLAGS }}

      - name: List features
        shell: cmd
        run: configure.bat -list-features

      - name: Build Qt
        shell: cmd
        run: |
          cd build
          cmake --build . --parallel
          cmake --install .
          
      - name: Package artifacts
        shell: cmd
        run: |
          set "OUTPUT_NAME=qt-windows-mingw-${{ matrix.build_type }}-${{ needs.setup.outputs.qt_branch }}"
          7z a %OUTPUT_NAME%.zip .\%OUTPUT_NAME%\*
          
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: qt-windows-mingw
          path: qt-windows-mingw-${{ matrix.build_type }}-${{ needs.setup.outputs.qt_branch }}.zip

  build-android:
    needs: setup
    runs-on: windows-latest
    strategy:
      matrix:
        build_type: [release]
        arch: [arm64-v8a, armeabi-v7a]
    steps:
      - name: Checkout Qt
        uses: actions/checkout@v4
        with:
          repository: qt/qt5
          ref: ${{ needs.setup.outputs.qt_branch }}
          fetch-depth: 0
          submodules: false
      
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '24'
      
      - name: Install dependencies
        run: choco install -y wget
      
      - name: Initialize Qt submodules
        shell: cmd
        run: init-repository.bat ${{ env.INIT_FLAGS }}

      - name: Download prebuilt Qt Host
        shell: cmd
        run: |
          mkdir qt-windows-mingw-release-dev
          cd qt-windows-mingw-release-dev
          set QT_ARCHIVE=qt-windows-mingw-release-dev.zip
          wget https://github.com/reg31/qt/releases/latest/download/%QT_ARCHIVE%
          7z x %QT_ARCHIVE%

      - name: Download prebuilt openssl
        shell: cmd
        run: |
          mkdir openssl
          cd openssl
          set OPENSSL_ARCHIVE=openssl-3.5-${{ matrix.arch }}.zip
          wget https://github.com/reg31/openssl/releases/latest/download/%OPENSSL_ARCHIVE%
          7z x %OPENSSL_ARCHIVE%

      - name: Read bin folder
        id: binFolder
        uses: jaywcjlove/github-action-read-file@main
        with:
          path: files/bin_${{ matrix.arch }}.7z

      - name: Read mkspecs folder
        id: mkspecsFolder
        uses: jaywcjlove/github-action-read-file@main
        with:
          path: files/mkspecs_${{ matrix.arch }}.7z
    
      - name: Extract folders
        shell: cmd
        run: |
          mkdir configFolders
          cd configFolders
          wget "${{ steps.binFolder.outputs.download_url }}"
          7z x bin_${{ matrix.arch }}.7z
          wget "${{ steps.mkspecsFolder.outputs.download_url }}"
          7z x mkspecs_${{ matrix.arch }}.7z
          
      - name: Configure Android Qt
        shell: cmd
        run: |
          set CFLAGS=-O3
          set CXXFLAGS=-O3
          set "OUTPUT_DIR=%CD:\=/%/qt-android-${{ matrix.arch }}-${{ matrix.build_type }}-${{ needs.setup.outputs.qt_branch }}"
          set "QT_ROOT_DIR=%CD:\=/%/qt-windows-mingw-release-dev"
          set "OPENSSL_ROOT=%CD:\=/%/openssl"
          
          mkdir build
          cd build
          
            ..\configure.bat -prefix "%OUTPUT_DIR%" -qt-host-path "%QT_ROOT_DIR%" ${{ env.SHARED_FLAGS }} ^
              -android-abis ${{ matrix.arch }} -android-ndk "%ANDROID_NDK_LATEST_HOME%" -android-sdk "%ANDROID_HOME%" ^
              -openssl-runtime -- -DOPENSSL_ROOT_DIR="%OPENSSL_ROOT%"
            
      - name: List features
        shell: cmd
        run: configure.bat -list-features          

      - name: Build Android Qt
        shell: cmd
        run: |
          cd build
          cmake --build . --parallel
          cmake --install . --strip
          
      - name: Package artifacts
        shell: cmd
        run: |
          set "OUTPUT_NAME=qt-android-${{ matrix.arch }}-${{ matrix.build_type }}-${{ needs.setup.outputs.qt_branch }}"
          Xcopy .\configFolders\mkspecs\ .\%OUTPUT_NAME%\mkspecs\ /c /i /s /y /r
          Xcopy .\configFolders\bin\ .\%OUTPUT_NAME%\bin\ /c /i /s /y /r
          7z a %OUTPUT_NAME%.zip .\%OUTPUT_NAME%\*
          
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: qt-android-${{ matrix.arch }}
          path: qt-android-${{ matrix.arch }}-${{ matrix.build_type }}-${{ needs.setup.outputs.qt_branch }}.zip

  build-macos:
    needs: setup
    runs-on: macos-latest
    strategy:
      matrix:
        build_type: [release]
    steps:
      - name: Checkout Qt
        uses: actions/checkout@v4
        with:
          repository: qt/qt5
          ref: ${{ needs.setup.outputs.qt_branch }}
          fetch-depth: 0
          submodules: false
      
      - name: Initialize Qt submodules
        run: perl init-repository ${{ env.INIT_FLAGS }}
        
      - name: Configure and build
        run: |
          OUTPUT_DIR=$(pwd)/qt-macos-${{ matrix.build_type }}-${{ needs.setup.outputs.qt_branch }}
          mkdir -p build
          cd build
          
          ../configure -platform macx-clang ${{ env.SHARED_FLAGS }} -securetransport -prefix $OUTPUT_DIR -- -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64"

          cmake --build . --parallel
          cmake --install . --strip
          
      - name: Package artifacts
        run: |
          OUTPUT_NAME=qt-macos-${{ matrix.build_type }}-${{ needs.setup.outputs.qt_branch }}
          7z a $OUTPUT_NAME.zip ./$OUTPUT_NAME/*
          
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: qt-macos
          path: qt-macos-${{ matrix.build_type }}-${{ needs.setup.outputs.qt_branch }}.zip

  build-ios:
    needs: setup
    runs-on: macos-latest
    strategy:
      matrix:
        build_type: [release]
    steps:
      - name: Checkout Qt
        uses: actions/checkout@v4
        with:
          repository: qt/qt5
          ref: ${{ needs.setup.outputs.qt_branch }}
          fetch-depth: 0
          submodules: false
      
      - name: Initialize Qt submodules
        run: perl init-repository ${{ env.INIT_FLAGS }}
      
      - name: Download prebuilt Qt Host
        run: |
          mkdir -p qt-macos-release-dev
          cd qt-macos-release-dev
          QT_ARCHIVE=qt-macos-release-dev.zip
          wget https://github.com/reg31/qt/releases/latest/download/$QT_ARCHIVE
          7z x $QT_ARCHIVE
        
      - name: Configure and build for iOS
        run: |
          OUTPUT_DIR=$(pwd)/qt-ios-${{ matrix.build_type }}-${{ needs.setup.outputs.qt_branch }}
          HOST_PATH=$(pwd)/qt-macos-release-dev
          mkdir -p build
          cd build
          
          ../configure -platform macx-ios-clang ${{ env.SHARED_FLAGS }} -securetransport -prefix $OUTPUT_DIR -qt-host-path $HOST_PATH
          ../configure -list-features

          cmake --build . --parallel
          cmake --install . --strip
          
      - name: Package artifacts
        run: |
          OUTPUT_NAME=qt-ios-${{ matrix.build_type }}-${{ needs.setup.outputs.qt_branch }}
          7z a $OUTPUT_NAME.zip ./$OUTPUT_NAME/*
          
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: qt-ios
          path: qt-ios-${{ matrix.build_type }}-${{ needs.setup.outputs.qt_branch }}.zip

  release:
    needs: [setup, build-windows, build-android, build-macos, build-ios]
    runs-on: ubuntu-latest
    if: ${{ !cancelled() && needs.build-windows.result == 'success' && needs.build-macos.result == 'success'}}
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: qt-builds
          
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.run_id }}
          name: "Qt Library - Build"
          fail_on_unmatched_files: false
          body: |
            Automated build of Qt ${{ needs.setup.outputs.qt_branch }} branch
            With qtbase and qtdeclarative
            
            This build includes binaries for:
            - Windows MINGW (x64)
            - Android (armeabi-v7a, arm64-v8a)
            - iOS
            - macOS         
          files: |
            qt-builds/qt-windows-mingw/*.zip
            qt-builds/qt-android-armeabi-v7a/*.zip
            qt-builds/qt-android-arm64-v8a/*.zip
            qt-builds/qt-macos/*.zip
            qt-builds/qt-ios/*.zip
          
      - name: Cleanup repository
        uses: dev-drprasad/delete-older-releases@v0.3.4
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
